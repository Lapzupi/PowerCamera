/*
 * This file is generated by jOOQ.
 */
package nl.svenar.powercamera.storage.generated.tables;


import java.util.function.Function;

import nl.svenar.powercamera.storage.generated.DefaultSchema;
import nl.svenar.powercamera.storage.generated.Keys;
import nl.svenar.powercamera.storage.generated.tables.records.PowercameraCommandsStartRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PowercameraCommandsStart extends TableImpl<PowercameraCommandsStartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>POWERCAMERA_COMMANDS_START</code>
     */
    public static final PowercameraCommandsStart POWERCAMERA_COMMANDS_START = new PowercameraCommandsStart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PowercameraCommandsStartRecord> getRecordType() {
        return PowercameraCommandsStartRecord.class;
    }

    /**
     * The column <code>POWERCAMERA_COMMANDS_START.ID</code>.
     */
    public final TableField<PowercameraCommandsStartRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>POWERCAMERA_COMMANDS_START.POINT_NUM</code>.
     */
    public final TableField<PowercameraCommandsStartRecord, Integer> POINT_NUM = createField(DSL.name("POINT_NUM"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>POWERCAMERA_COMMANDS_START.CAMERA_ID</code>.
     */
    public final TableField<PowercameraCommandsStartRecord, String> CAMERA_ID = createField(DSL.name("CAMERA_ID"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>POWERCAMERA_COMMANDS_START.order</code>.
     */
    public final TableField<PowercameraCommandsStartRecord, Integer> ORDER = createField(DSL.name("order"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>POWERCAMERA_COMMANDS_START.COMMAND</code>.
     */
    public final TableField<PowercameraCommandsStartRecord, String> COMMAND = createField(DSL.name("COMMAND"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    private PowercameraCommandsStart(Name alias, Table<PowercameraCommandsStartRecord> aliased) {
        this(alias, aliased, null);
    }

    private PowercameraCommandsStart(Name alias, Table<PowercameraCommandsStartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>POWERCAMERA_COMMANDS_START</code> table reference
     */
    public PowercameraCommandsStart(String alias) {
        this(DSL.name(alias), POWERCAMERA_COMMANDS_START);
    }

    /**
     * Create an aliased <code>POWERCAMERA_COMMANDS_START</code> table reference
     */
    public PowercameraCommandsStart(Name alias) {
        this(alias, POWERCAMERA_COMMANDS_START);
    }

    /**
     * Create a <code>POWERCAMERA_COMMANDS_START</code> table reference
     */
    public PowercameraCommandsStart() {
        this(DSL.name("POWERCAMERA_COMMANDS_START"), null);
    }

    public <O extends Record> PowercameraCommandsStart(Table<O> child, ForeignKey<O, PowercameraCommandsStartRecord> key) {
        super(child, key, POWERCAMERA_COMMANDS_START);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PowercameraCommandsStartRecord, Integer> getIdentity() {
        return (Identity<PowercameraCommandsStartRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PowercameraCommandsStartRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    @Override
    public PowercameraCommandsStart as(String alias) {
        return new PowercameraCommandsStart(DSL.name(alias), this);
    }

    @Override
    public PowercameraCommandsStart as(Name alias) {
        return new PowercameraCommandsStart(alias, this);
    }

    @Override
    public PowercameraCommandsStart as(Table<?> alias) {
        return new PowercameraCommandsStart(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PowercameraCommandsStart rename(String name) {
        return new PowercameraCommandsStart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PowercameraCommandsStart rename(Name name) {
        return new PowercameraCommandsStart(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PowercameraCommandsStart rename(Table<?> name) {
        return new PowercameraCommandsStart(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
